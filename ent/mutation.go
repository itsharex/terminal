// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"terminal/ent/folders"
	"terminal/ent/hosts"
	"terminal/ent/keys"
	"terminal/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFolders = "Folders"
	TypeHosts   = "Hosts"
	TypeKeys    = "Keys"
)

// FoldersMutation represents an operation that mutates the Folders nodes in the graph.
type FoldersMutation struct {
	config
	op              Op
	typ             string
	id              *int
	label           *string
	clearedFields   map[string]struct{}
	parent          *int
	clearedparent   bool
	children        map[int]struct{}
	removedchildren map[int]struct{}
	clearedchildren bool
	host            *int
	clearedhost     bool
	done            bool
	oldValue        func(context.Context) (*Folders, error)
	predicates      []predicate.Folders
}

var _ ent.Mutation = (*FoldersMutation)(nil)

// foldersOption allows management of the mutation configuration using functional options.
type foldersOption func(*FoldersMutation)

// newFoldersMutation creates new mutation for the Folders entity.
func newFoldersMutation(c config, op Op, opts ...foldersOption) *FoldersMutation {
	m := &FoldersMutation{
		config:        c,
		op:            op,
		typ:           TypeFolders,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFoldersID sets the ID field of the mutation.
func withFoldersID(id int) foldersOption {
	return func(m *FoldersMutation) {
		var (
			err   error
			once  sync.Once
			value *Folders
		)
		m.oldValue = func(ctx context.Context) (*Folders, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Folders.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFolders sets the old Folders of the mutation.
func withFolders(node *Folders) foldersOption {
	return func(m *FoldersMutation) {
		m.oldValue = func(context.Context) (*Folders, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FoldersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FoldersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FoldersMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FoldersMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Folders.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLabel sets the "label" field.
func (m *FoldersMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *FoldersMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the Folders entity.
// If the Folders object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FoldersMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *FoldersMutation) ResetLabel() {
	m.label = nil
}

// SetParentID sets the "parent_id" field.
func (m *FoldersMutation) SetParentID(i int) {
	m.parent = &i
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *FoldersMutation) ParentID() (r int, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Folders entity.
// If the Folders object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FoldersMutation) OldParentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *FoldersMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[folders.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *FoldersMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[folders.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *FoldersMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, folders.FieldParentID)
}

// ClearParent clears the "parent" edge to the Folders entity.
func (m *FoldersMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[folders.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Folders entity was cleared.
func (m *FoldersMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *FoldersMutation) ParentIDs() (ids []int) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *FoldersMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Folders entity by ids.
func (m *FoldersMutation) AddChildIDs(ids ...int) {
	if m.children == nil {
		m.children = make(map[int]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Folders entity.
func (m *FoldersMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Folders entity was cleared.
func (m *FoldersMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Folders entity by IDs.
func (m *FoldersMutation) RemoveChildIDs(ids ...int) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Folders entity.
func (m *FoldersMutation) RemovedChildrenIDs() (ids []int) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *FoldersMutation) ChildrenIDs() (ids []int) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *FoldersMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// SetHostID sets the "host" edge to the Hosts entity by id.
func (m *FoldersMutation) SetHostID(id int) {
	m.host = &id
}

// ClearHost clears the "host" edge to the Hosts entity.
func (m *FoldersMutation) ClearHost() {
	m.clearedhost = true
}

// HostCleared reports if the "host" edge to the Hosts entity was cleared.
func (m *FoldersMutation) HostCleared() bool {
	return m.clearedhost
}

// HostID returns the "host" edge ID in the mutation.
func (m *FoldersMutation) HostID() (id int, exists bool) {
	if m.host != nil {
		return *m.host, true
	}
	return
}

// HostIDs returns the "host" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HostID instead. It exists only for internal usage by the builders.
func (m *FoldersMutation) HostIDs() (ids []int) {
	if id := m.host; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHost resets all changes to the "host" edge.
func (m *FoldersMutation) ResetHost() {
	m.host = nil
	m.clearedhost = false
}

// Where appends a list predicates to the FoldersMutation builder.
func (m *FoldersMutation) Where(ps ...predicate.Folders) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FoldersMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FoldersMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Folders, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FoldersMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FoldersMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Folders).
func (m *FoldersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FoldersMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.label != nil {
		fields = append(fields, folders.FieldLabel)
	}
	if m.parent != nil {
		fields = append(fields, folders.FieldParentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FoldersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case folders.FieldLabel:
		return m.Label()
	case folders.FieldParentID:
		return m.ParentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FoldersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case folders.FieldLabel:
		return m.OldLabel(ctx)
	case folders.FieldParentID:
		return m.OldParentID(ctx)
	}
	return nil, fmt.Errorf("unknown Folders field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FoldersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case folders.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case folders.FieldParentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	}
	return fmt.Errorf("unknown Folders field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FoldersMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FoldersMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FoldersMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Folders numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FoldersMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(folders.FieldParentID) {
		fields = append(fields, folders.FieldParentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FoldersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FoldersMutation) ClearField(name string) error {
	switch name {
	case folders.FieldParentID:
		m.ClearParentID()
		return nil
	}
	return fmt.Errorf("unknown Folders nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FoldersMutation) ResetField(name string) error {
	switch name {
	case folders.FieldLabel:
		m.ResetLabel()
		return nil
	case folders.FieldParentID:
		m.ResetParentID()
		return nil
	}
	return fmt.Errorf("unknown Folders field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FoldersMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.parent != nil {
		edges = append(edges, folders.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, folders.EdgeChildren)
	}
	if m.host != nil {
		edges = append(edges, folders.EdgeHost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FoldersMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case folders.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case folders.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case folders.EdgeHost:
		if id := m.host; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FoldersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchildren != nil {
		edges = append(edges, folders.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FoldersMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case folders.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FoldersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedparent {
		edges = append(edges, folders.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, folders.EdgeChildren)
	}
	if m.clearedhost {
		edges = append(edges, folders.EdgeHost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FoldersMutation) EdgeCleared(name string) bool {
	switch name {
	case folders.EdgeParent:
		return m.clearedparent
	case folders.EdgeChildren:
		return m.clearedchildren
	case folders.EdgeHost:
		return m.clearedhost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FoldersMutation) ClearEdge(name string) error {
	switch name {
	case folders.EdgeParent:
		m.ClearParent()
		return nil
	case folders.EdgeHost:
		m.ClearHost()
		return nil
	}
	return fmt.Errorf("unknown Folders unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FoldersMutation) ResetEdge(name string) error {
	switch name {
	case folders.EdgeParent:
		m.ResetParent()
		return nil
	case folders.EdgeChildren:
		m.ResetChildren()
		return nil
	case folders.EdgeHost:
		m.ResetHost()
		return nil
	}
	return fmt.Errorf("unknown Folders edge %s", name)
}

// HostsMutation represents an operation that mutates the Hosts nodes in the graph.
type HostsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	label         *string
	username      *string
	address       *string
	port          *uint
	addport       *int
	password      *string
	clearedFields map[string]struct{}
	folder        *int
	clearedfolder bool
	key           *int
	clearedkey    bool
	done          bool
	oldValue      func(context.Context) (*Hosts, error)
	predicates    []predicate.Hosts
}

var _ ent.Mutation = (*HostsMutation)(nil)

// hostsOption allows management of the mutation configuration using functional options.
type hostsOption func(*HostsMutation)

// newHostsMutation creates new mutation for the Hosts entity.
func newHostsMutation(c config, op Op, opts ...hostsOption) *HostsMutation {
	m := &HostsMutation{
		config:        c,
		op:            op,
		typ:           TypeHosts,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHostsID sets the ID field of the mutation.
func withHostsID(id int) hostsOption {
	return func(m *HostsMutation) {
		var (
			err   error
			once  sync.Once
			value *Hosts
		)
		m.oldValue = func(ctx context.Context) (*Hosts, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hosts.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHosts sets the old Hosts of the mutation.
func withHosts(node *Hosts) hostsOption {
	return func(m *HostsMutation) {
		m.oldValue = func(context.Context) (*Hosts, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HostsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HostsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HostsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HostsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hosts.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLabel sets the "label" field.
func (m *HostsMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *HostsMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the Hosts entity.
// If the Hosts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostsMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *HostsMutation) ResetLabel() {
	m.label = nil
}

// SetUsername sets the "username" field.
func (m *HostsMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *HostsMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Hosts entity.
// If the Hosts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostsMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *HostsMutation) ResetUsername() {
	m.username = nil
}

// SetAddress sets the "address" field.
func (m *HostsMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *HostsMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Hosts entity.
// If the Hosts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostsMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *HostsMutation) ResetAddress() {
	m.address = nil
}

// SetPort sets the "port" field.
func (m *HostsMutation) SetPort(u uint) {
	m.port = &u
	m.addport = nil
}

// Port returns the value of the "port" field in the mutation.
func (m *HostsMutation) Port() (r uint, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the Hosts entity.
// If the Hosts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostsMutation) OldPort(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// AddPort adds u to the "port" field.
func (m *HostsMutation) AddPort(u int) {
	if m.addport != nil {
		*m.addport += u
	} else {
		m.addport = &u
	}
}

// AddedPort returns the value that was added to the "port" field in this mutation.
func (m *HostsMutation) AddedPort() (r int, exists bool) {
	v := m.addport
	if v == nil {
		return
	}
	return *v, true
}

// ResetPort resets all changes to the "port" field.
func (m *HostsMutation) ResetPort() {
	m.port = nil
	m.addport = nil
}

// SetPassword sets the "password" field.
func (m *HostsMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *HostsMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Hosts entity.
// If the Hosts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostsMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *HostsMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[hosts.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *HostsMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[hosts.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *HostsMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, hosts.FieldPassword)
}

// SetFolderID sets the "folder_id" field.
func (m *HostsMutation) SetFolderID(i int) {
	m.folder = &i
}

// FolderID returns the value of the "folder_id" field in the mutation.
func (m *HostsMutation) FolderID() (r int, exists bool) {
	v := m.folder
	if v == nil {
		return
	}
	return *v, true
}

// OldFolderID returns the old "folder_id" field's value of the Hosts entity.
// If the Hosts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostsMutation) OldFolderID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFolderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFolderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFolderID: %w", err)
	}
	return oldValue.FolderID, nil
}

// ClearFolderID clears the value of the "folder_id" field.
func (m *HostsMutation) ClearFolderID() {
	m.folder = nil
	m.clearedFields[hosts.FieldFolderID] = struct{}{}
}

// FolderIDCleared returns if the "folder_id" field was cleared in this mutation.
func (m *HostsMutation) FolderIDCleared() bool {
	_, ok := m.clearedFields[hosts.FieldFolderID]
	return ok
}

// ResetFolderID resets all changes to the "folder_id" field.
func (m *HostsMutation) ResetFolderID() {
	m.folder = nil
	delete(m.clearedFields, hosts.FieldFolderID)
}

// SetKeyID sets the "key_id" field.
func (m *HostsMutation) SetKeyID(i int) {
	m.key = &i
}

// KeyID returns the value of the "key_id" field in the mutation.
func (m *HostsMutation) KeyID() (r int, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKeyID returns the old "key_id" field's value of the Hosts entity.
// If the Hosts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostsMutation) OldKeyID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeyID: %w", err)
	}
	return oldValue.KeyID, nil
}

// ClearKeyID clears the value of the "key_id" field.
func (m *HostsMutation) ClearKeyID() {
	m.key = nil
	m.clearedFields[hosts.FieldKeyID] = struct{}{}
}

// KeyIDCleared returns if the "key_id" field was cleared in this mutation.
func (m *HostsMutation) KeyIDCleared() bool {
	_, ok := m.clearedFields[hosts.FieldKeyID]
	return ok
}

// ResetKeyID resets all changes to the "key_id" field.
func (m *HostsMutation) ResetKeyID() {
	m.key = nil
	delete(m.clearedFields, hosts.FieldKeyID)
}

// ClearFolder clears the "folder" edge to the Folders entity.
func (m *HostsMutation) ClearFolder() {
	m.clearedfolder = true
	m.clearedFields[hosts.FieldFolderID] = struct{}{}
}

// FolderCleared reports if the "folder" edge to the Folders entity was cleared.
func (m *HostsMutation) FolderCleared() bool {
	return m.FolderIDCleared() || m.clearedfolder
}

// FolderIDs returns the "folder" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FolderID instead. It exists only for internal usage by the builders.
func (m *HostsMutation) FolderIDs() (ids []int) {
	if id := m.folder; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFolder resets all changes to the "folder" edge.
func (m *HostsMutation) ResetFolder() {
	m.folder = nil
	m.clearedfolder = false
}

// ClearKey clears the "key" edge to the Keys entity.
func (m *HostsMutation) ClearKey() {
	m.clearedkey = true
	m.clearedFields[hosts.FieldKeyID] = struct{}{}
}

// KeyCleared reports if the "key" edge to the Keys entity was cleared.
func (m *HostsMutation) KeyCleared() bool {
	return m.KeyIDCleared() || m.clearedkey
}

// KeyIDs returns the "key" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// KeyID instead. It exists only for internal usage by the builders.
func (m *HostsMutation) KeyIDs() (ids []int) {
	if id := m.key; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetKey resets all changes to the "key" edge.
func (m *HostsMutation) ResetKey() {
	m.key = nil
	m.clearedkey = false
}

// Where appends a list predicates to the HostsMutation builder.
func (m *HostsMutation) Where(ps ...predicate.Hosts) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HostsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HostsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Hosts, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HostsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HostsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Hosts).
func (m *HostsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HostsMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.label != nil {
		fields = append(fields, hosts.FieldLabel)
	}
	if m.username != nil {
		fields = append(fields, hosts.FieldUsername)
	}
	if m.address != nil {
		fields = append(fields, hosts.FieldAddress)
	}
	if m.port != nil {
		fields = append(fields, hosts.FieldPort)
	}
	if m.password != nil {
		fields = append(fields, hosts.FieldPassword)
	}
	if m.folder != nil {
		fields = append(fields, hosts.FieldFolderID)
	}
	if m.key != nil {
		fields = append(fields, hosts.FieldKeyID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HostsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hosts.FieldLabel:
		return m.Label()
	case hosts.FieldUsername:
		return m.Username()
	case hosts.FieldAddress:
		return m.Address()
	case hosts.FieldPort:
		return m.Port()
	case hosts.FieldPassword:
		return m.Password()
	case hosts.FieldFolderID:
		return m.FolderID()
	case hosts.FieldKeyID:
		return m.KeyID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HostsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hosts.FieldLabel:
		return m.OldLabel(ctx)
	case hosts.FieldUsername:
		return m.OldUsername(ctx)
	case hosts.FieldAddress:
		return m.OldAddress(ctx)
	case hosts.FieldPort:
		return m.OldPort(ctx)
	case hosts.FieldPassword:
		return m.OldPassword(ctx)
	case hosts.FieldFolderID:
		return m.OldFolderID(ctx)
	case hosts.FieldKeyID:
		return m.OldKeyID(ctx)
	}
	return nil, fmt.Errorf("unknown Hosts field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hosts.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case hosts.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case hosts.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case hosts.FieldPort:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case hosts.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case hosts.FieldFolderID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFolderID(v)
		return nil
	case hosts.FieldKeyID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeyID(v)
		return nil
	}
	return fmt.Errorf("unknown Hosts field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HostsMutation) AddedFields() []string {
	var fields []string
	if m.addport != nil {
		fields = append(fields, hosts.FieldPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HostsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hosts.FieldPort:
		return m.AddedPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hosts.FieldPort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPort(v)
		return nil
	}
	return fmt.Errorf("unknown Hosts numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HostsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(hosts.FieldPassword) {
		fields = append(fields, hosts.FieldPassword)
	}
	if m.FieldCleared(hosts.FieldFolderID) {
		fields = append(fields, hosts.FieldFolderID)
	}
	if m.FieldCleared(hosts.FieldKeyID) {
		fields = append(fields, hosts.FieldKeyID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HostsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HostsMutation) ClearField(name string) error {
	switch name {
	case hosts.FieldPassword:
		m.ClearPassword()
		return nil
	case hosts.FieldFolderID:
		m.ClearFolderID()
		return nil
	case hosts.FieldKeyID:
		m.ClearKeyID()
		return nil
	}
	return fmt.Errorf("unknown Hosts nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HostsMutation) ResetField(name string) error {
	switch name {
	case hosts.FieldLabel:
		m.ResetLabel()
		return nil
	case hosts.FieldUsername:
		m.ResetUsername()
		return nil
	case hosts.FieldAddress:
		m.ResetAddress()
		return nil
	case hosts.FieldPort:
		m.ResetPort()
		return nil
	case hosts.FieldPassword:
		m.ResetPassword()
		return nil
	case hosts.FieldFolderID:
		m.ResetFolderID()
		return nil
	case hosts.FieldKeyID:
		m.ResetKeyID()
		return nil
	}
	return fmt.Errorf("unknown Hosts field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HostsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.folder != nil {
		edges = append(edges, hosts.EdgeFolder)
	}
	if m.key != nil {
		edges = append(edges, hosts.EdgeKey)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HostsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hosts.EdgeFolder:
		if id := m.folder; id != nil {
			return []ent.Value{*id}
		}
	case hosts.EdgeKey:
		if id := m.key; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HostsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HostsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HostsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfolder {
		edges = append(edges, hosts.EdgeFolder)
	}
	if m.clearedkey {
		edges = append(edges, hosts.EdgeKey)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HostsMutation) EdgeCleared(name string) bool {
	switch name {
	case hosts.EdgeFolder:
		return m.clearedfolder
	case hosts.EdgeKey:
		return m.clearedkey
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HostsMutation) ClearEdge(name string) error {
	switch name {
	case hosts.EdgeFolder:
		m.ClearFolder()
		return nil
	case hosts.EdgeKey:
		m.ClearKey()
		return nil
	}
	return fmt.Errorf("unknown Hosts unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HostsMutation) ResetEdge(name string) error {
	switch name {
	case hosts.EdgeFolder:
		m.ResetFolder()
		return nil
	case hosts.EdgeKey:
		m.ResetKey()
		return nil
	}
	return fmt.Errorf("unknown Hosts edge %s", name)
}

// KeysMutation represents an operation that mutates the Keys nodes in the graph.
type KeysMutation struct {
	config
	op            Op
	typ           string
	id            *int
	label         *string
	content       *[]byte
	clearedFields map[string]struct{}
	host          map[int]struct{}
	removedhost   map[int]struct{}
	clearedhost   bool
	done          bool
	oldValue      func(context.Context) (*Keys, error)
	predicates    []predicate.Keys
}

var _ ent.Mutation = (*KeysMutation)(nil)

// keysOption allows management of the mutation configuration using functional options.
type keysOption func(*KeysMutation)

// newKeysMutation creates new mutation for the Keys entity.
func newKeysMutation(c config, op Op, opts ...keysOption) *KeysMutation {
	m := &KeysMutation{
		config:        c,
		op:            op,
		typ:           TypeKeys,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withKeysID sets the ID field of the mutation.
func withKeysID(id int) keysOption {
	return func(m *KeysMutation) {
		var (
			err   error
			once  sync.Once
			value *Keys
		)
		m.oldValue = func(ctx context.Context) (*Keys, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Keys.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withKeys sets the old Keys of the mutation.
func withKeys(node *Keys) keysOption {
	return func(m *KeysMutation) {
		m.oldValue = func(context.Context) (*Keys, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m KeysMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m KeysMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *KeysMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *KeysMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Keys.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLabel sets the "label" field.
func (m *KeysMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *KeysMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the Keys entity.
// If the Keys object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeysMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *KeysMutation) ResetLabel() {
	m.label = nil
}

// SetContent sets the "content" field.
func (m *KeysMutation) SetContent(b []byte) {
	m.content = &b
}

// Content returns the value of the "content" field in the mutation.
func (m *KeysMutation) Content() (r []byte, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Keys entity.
// If the Keys object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeysMutation) OldContent(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *KeysMutation) ResetContent() {
	m.content = nil
}

// AddHostIDs adds the "host" edge to the Hosts entity by ids.
func (m *KeysMutation) AddHostIDs(ids ...int) {
	if m.host == nil {
		m.host = make(map[int]struct{})
	}
	for i := range ids {
		m.host[ids[i]] = struct{}{}
	}
}

// ClearHost clears the "host" edge to the Hosts entity.
func (m *KeysMutation) ClearHost() {
	m.clearedhost = true
}

// HostCleared reports if the "host" edge to the Hosts entity was cleared.
func (m *KeysMutation) HostCleared() bool {
	return m.clearedhost
}

// RemoveHostIDs removes the "host" edge to the Hosts entity by IDs.
func (m *KeysMutation) RemoveHostIDs(ids ...int) {
	if m.removedhost == nil {
		m.removedhost = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.host, ids[i])
		m.removedhost[ids[i]] = struct{}{}
	}
}

// RemovedHost returns the removed IDs of the "host" edge to the Hosts entity.
func (m *KeysMutation) RemovedHostIDs() (ids []int) {
	for id := range m.removedhost {
		ids = append(ids, id)
	}
	return
}

// HostIDs returns the "host" edge IDs in the mutation.
func (m *KeysMutation) HostIDs() (ids []int) {
	for id := range m.host {
		ids = append(ids, id)
	}
	return
}

// ResetHost resets all changes to the "host" edge.
func (m *KeysMutation) ResetHost() {
	m.host = nil
	m.clearedhost = false
	m.removedhost = nil
}

// Where appends a list predicates to the KeysMutation builder.
func (m *KeysMutation) Where(ps ...predicate.Keys) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the KeysMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *KeysMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Keys, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *KeysMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *KeysMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Keys).
func (m *KeysMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *KeysMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.label != nil {
		fields = append(fields, keys.FieldLabel)
	}
	if m.content != nil {
		fields = append(fields, keys.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *KeysMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case keys.FieldLabel:
		return m.Label()
	case keys.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *KeysMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case keys.FieldLabel:
		return m.OldLabel(ctx)
	case keys.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown Keys field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeysMutation) SetField(name string, value ent.Value) error {
	switch name {
	case keys.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case keys.FieldContent:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown Keys field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *KeysMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *KeysMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeysMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Keys numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *KeysMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *KeysMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *KeysMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Keys nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *KeysMutation) ResetField(name string) error {
	switch name {
	case keys.FieldLabel:
		m.ResetLabel()
		return nil
	case keys.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown Keys field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *KeysMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.host != nil {
		edges = append(edges, keys.EdgeHost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *KeysMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case keys.EdgeHost:
		ids := make([]ent.Value, 0, len(m.host))
		for id := range m.host {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *KeysMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedhost != nil {
		edges = append(edges, keys.EdgeHost)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *KeysMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case keys.EdgeHost:
		ids := make([]ent.Value, 0, len(m.removedhost))
		for id := range m.removedhost {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *KeysMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedhost {
		edges = append(edges, keys.EdgeHost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *KeysMutation) EdgeCleared(name string) bool {
	switch name {
	case keys.EdgeHost:
		return m.clearedhost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *KeysMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Keys unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *KeysMutation) ResetEdge(name string) error {
	switch name {
	case keys.EdgeHost:
		m.ResetHost()
		return nil
	}
	return fmt.Errorf("unknown Keys edge %s", name)
}
