// Code generated by ent, DO NOT EDIT.

package ent

import (
	"terminal/ent/folders"
	"terminal/ent/hosts"
	"terminal/ent/keys"
	"terminal/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	foldersFields := schema.Folders{}.Fields()
	_ = foldersFields
	// foldersDescLabel is the schema descriptor for label field.
	foldersDescLabel := foldersFields[0].Descriptor()
	// folders.LabelValidator is a validator for the "label" field. It is called by the builders before save.
	folders.LabelValidator = foldersDescLabel.Validators[0].(func(string) error)
	hostsFields := schema.Hosts{}.Fields()
	_ = hostsFields
	// hostsDescLabel is the schema descriptor for label field.
	hostsDescLabel := hostsFields[0].Descriptor()
	// hosts.LabelValidator is a validator for the "label" field. It is called by the builders before save.
	hosts.LabelValidator = hostsDescLabel.Validators[0].(func(string) error)
	// hostsDescUsername is the schema descriptor for username field.
	hostsDescUsername := hostsFields[1].Descriptor()
	// hosts.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	hosts.UsernameValidator = hostsDescUsername.Validators[0].(func(string) error)
	// hostsDescAddress is the schema descriptor for address field.
	hostsDescAddress := hostsFields[2].Descriptor()
	// hosts.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	hosts.AddressValidator = func() func(string) error {
		validators := hostsDescAddress.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(address string) error {
			for _, fn := range fns {
				if err := fn(address); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// hostsDescPort is the schema descriptor for port field.
	hostsDescPort := hostsFields[3].Descriptor()
	// hosts.DefaultPort holds the default value on creation for the port field.
	hosts.DefaultPort = hostsDescPort.Default.(uint)
	// hosts.PortValidator is a validator for the "port" field. It is called by the builders before save.
	hosts.PortValidator = hostsDescPort.Validators[0].(func(uint) error)
	keysFields := schema.Keys{}.Fields()
	_ = keysFields
	// keysDescLabel is the schema descriptor for label field.
	keysDescLabel := keysFields[0].Descriptor()
	// keys.LabelValidator is a validator for the "label" field. It is called by the builders before save.
	keys.LabelValidator = keysDescLabel.Validators[0].(func(string) error)
	// keysDescContent is the schema descriptor for content field.
	keysDescContent := keysFields[1].Descriptor()
	// keys.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	keys.ContentValidator = func() func([]byte) error {
		validators := keysDescContent.Validators
		fns := [...]func([]byte) error{
			validators[0].(func([]byte) error),
			validators[1].(func([]byte) error),
		}
		return func(content []byte) error {
			for _, fn := range fns {
				if err := fn(content); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
