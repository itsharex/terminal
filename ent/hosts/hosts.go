// Code generated by ent, DO NOT EDIT.

package hosts

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hosts type in the database.
	Label = "hosts"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldFolderID holds the string denoting the folder_id field in the database.
	FieldFolderID = "folder_id"
	// FieldKeyID holds the string denoting the key_id field in the database.
	FieldKeyID = "key_id"
	// EdgeFolder holds the string denoting the folder edge name in mutations.
	EdgeFolder = "folder"
	// EdgeKey holds the string denoting the key edge name in mutations.
	EdgeKey = "key"
	// Table holds the table name of the hosts in the database.
	Table = "hosts"
	// FolderTable is the table that holds the folder relation/edge.
	FolderTable = "hosts"
	// FolderInverseTable is the table name for the Folders entity.
	// It exists in this package in order to avoid circular dependency with the "folders" package.
	FolderInverseTable = "folders"
	// FolderColumn is the table column denoting the folder relation/edge.
	FolderColumn = "folder_id"
	// KeyTable is the table that holds the key relation/edge.
	KeyTable = "hosts"
	// KeyInverseTable is the table name for the Keys entity.
	// It exists in this package in order to avoid circular dependency with the "keys" package.
	KeyInverseTable = "keys"
	// KeyColumn is the table column denoting the key relation/edge.
	KeyColumn = "key_id"
)

// Columns holds all SQL columns for hosts fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldUsername,
	FieldAddress,
	FieldPort,
	FieldPassword,
	FieldFolderID,
	FieldKeyID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LabelValidator is a validator for the "label" field. It is called by the builders before save.
	LabelValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// DefaultPort holds the default value on creation for the "port" field.
	DefaultPort uint
	// PortValidator is a validator for the "port" field. It is called by the builders before save.
	PortValidator func(uint) error
)

// OrderOption defines the ordering options for the Hosts queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByPort orders the results by the port field.
func ByPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPort, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByFolderID orders the results by the folder_id field.
func ByFolderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFolderID, opts...).ToFunc()
}

// ByKeyID orders the results by the key_id field.
func ByKeyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyID, opts...).ToFunc()
}

// ByFolderField orders the results by folder field.
func ByFolderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFolderStep(), sql.OrderByField(field, opts...))
	}
}

// ByKeyField orders the results by key field.
func ByKeyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newKeyStep(), sql.OrderByField(field, opts...))
	}
}
func newFolderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FolderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FolderTable, FolderColumn),
	)
}
func newKeyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(KeyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, KeyTable, KeyColumn),
	)
}
