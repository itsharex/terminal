// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"terminal/ent/folders"
	"terminal/ent/hosts"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Folders is the model entity for the Folders schema.
type Folders struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 标记
	Label string `json:"label,omitempty"`
	// 上级ID
	ParentID int `json:"parent_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FoldersQuery when eager-loading is set.
	Edges        FoldersEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FoldersEdges holds the relations/edges for other nodes in the graph.
type FoldersEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Folders `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Folders `json:"children,omitempty"`
	// Host holds the value of the host edge.
	Host *Hosts `json:"host,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FoldersEdges) ParentOrErr() (*Folders, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: folders.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e FoldersEdges) ChildrenOrErr() ([]*Folders, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FoldersEdges) HostOrErr() (*Hosts, error) {
	if e.Host != nil {
		return e.Host, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: hosts.Label}
	}
	return nil, &NotLoadedError{edge: "host"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Folders) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case folders.FieldID, folders.FieldParentID:
			values[i] = new(sql.NullInt64)
		case folders.FieldLabel:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Folders fields.
func (f *Folders) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case folders.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case folders.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				f.Label = value.String
			}
		case folders.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				f.ParentID = int(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Folders.
// This includes values selected through modifiers, order, etc.
func (f *Folders) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Folders entity.
func (f *Folders) QueryParent() *FoldersQuery {
	return NewFoldersClient(f.config).QueryParent(f)
}

// QueryChildren queries the "children" edge of the Folders entity.
func (f *Folders) QueryChildren() *FoldersQuery {
	return NewFoldersClient(f.config).QueryChildren(f)
}

// QueryHost queries the "host" edge of the Folders entity.
func (f *Folders) QueryHost() *HostsQuery {
	return NewFoldersClient(f.config).QueryHost(f)
}

// Update returns a builder for updating this Folders.
// Note that you need to call Folders.Unwrap() before calling this method if this Folders
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Folders) Update() *FoldersUpdateOne {
	return NewFoldersClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Folders entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Folders) Unwrap() *Folders {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Folders is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Folders) String() string {
	var builder strings.Builder
	builder.WriteString("Folders(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("label=")
	builder.WriteString(f.Label)
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ParentID))
	builder.WriteByte(')')
	return builder.String()
}

// FoldersSlice is a parsable slice of Folders.
type FoldersSlice []*Folders
