// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"terminal/ent/hosts"
	"terminal/ent/keys"
	"terminal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KeysUpdate is the builder for updating Keys entities.
type KeysUpdate struct {
	config
	hooks    []Hook
	mutation *KeysMutation
}

// Where appends a list predicates to the KeysUpdate builder.
func (ku *KeysUpdate) Where(ps ...predicate.Keys) *KeysUpdate {
	ku.mutation.Where(ps...)
	return ku
}

// SetLabel sets the "label" field.
func (ku *KeysUpdate) SetLabel(s string) *KeysUpdate {
	ku.mutation.SetLabel(s)
	return ku
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (ku *KeysUpdate) SetNillableLabel(s *string) *KeysUpdate {
	if s != nil {
		ku.SetLabel(*s)
	}
	return ku
}

// SetContent sets the "content" field.
func (ku *KeysUpdate) SetContent(b []byte) *KeysUpdate {
	ku.mutation.SetContent(b)
	return ku
}

// AddHostIDs adds the "host" edge to the Hosts entity by IDs.
func (ku *KeysUpdate) AddHostIDs(ids ...int) *KeysUpdate {
	ku.mutation.AddHostIDs(ids...)
	return ku
}

// AddHost adds the "host" edges to the Hosts entity.
func (ku *KeysUpdate) AddHost(h ...*Hosts) *KeysUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ku.AddHostIDs(ids...)
}

// Mutation returns the KeysMutation object of the builder.
func (ku *KeysUpdate) Mutation() *KeysMutation {
	return ku.mutation
}

// ClearHost clears all "host" edges to the Hosts entity.
func (ku *KeysUpdate) ClearHost() *KeysUpdate {
	ku.mutation.ClearHost()
	return ku
}

// RemoveHostIDs removes the "host" edge to Hosts entities by IDs.
func (ku *KeysUpdate) RemoveHostIDs(ids ...int) *KeysUpdate {
	ku.mutation.RemoveHostIDs(ids...)
	return ku
}

// RemoveHost removes "host" edges to Hosts entities.
func (ku *KeysUpdate) RemoveHost(h ...*Hosts) *KeysUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ku.RemoveHostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KeysUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ku.sqlSave, ku.mutation, ku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KeysUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KeysUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KeysUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ku *KeysUpdate) check() error {
	if v, ok := ku.mutation.Label(); ok {
		if err := keys.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "Keys.label": %w`, err)}
		}
	}
	if v, ok := ku.mutation.Content(); ok {
		if err := keys.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Keys.content": %w`, err)}
		}
	}
	return nil
}

func (ku *KeysUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ku.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(keys.Table, keys.Columns, sqlgraph.NewFieldSpec(keys.FieldID, field.TypeInt))
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.Label(); ok {
		_spec.SetField(keys.FieldLabel, field.TypeString, value)
	}
	if value, ok := ku.mutation.Content(); ok {
		_spec.SetField(keys.FieldContent, field.TypeBytes, value)
	}
	if ku.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   keys.HostTable,
			Columns: []string{keys.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hosts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.RemovedHostIDs(); len(nodes) > 0 && !ku.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   keys.HostTable,
			Columns: []string{keys.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hosts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   keys.HostTable,
			Columns: []string{keys.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hosts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keys.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ku.mutation.done = true
	return n, nil
}

// KeysUpdateOne is the builder for updating a single Keys entity.
type KeysUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeysMutation
}

// SetLabel sets the "label" field.
func (kuo *KeysUpdateOne) SetLabel(s string) *KeysUpdateOne {
	kuo.mutation.SetLabel(s)
	return kuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (kuo *KeysUpdateOne) SetNillableLabel(s *string) *KeysUpdateOne {
	if s != nil {
		kuo.SetLabel(*s)
	}
	return kuo
}

// SetContent sets the "content" field.
func (kuo *KeysUpdateOne) SetContent(b []byte) *KeysUpdateOne {
	kuo.mutation.SetContent(b)
	return kuo
}

// AddHostIDs adds the "host" edge to the Hosts entity by IDs.
func (kuo *KeysUpdateOne) AddHostIDs(ids ...int) *KeysUpdateOne {
	kuo.mutation.AddHostIDs(ids...)
	return kuo
}

// AddHost adds the "host" edges to the Hosts entity.
func (kuo *KeysUpdateOne) AddHost(h ...*Hosts) *KeysUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return kuo.AddHostIDs(ids...)
}

// Mutation returns the KeysMutation object of the builder.
func (kuo *KeysUpdateOne) Mutation() *KeysMutation {
	return kuo.mutation
}

// ClearHost clears all "host" edges to the Hosts entity.
func (kuo *KeysUpdateOne) ClearHost() *KeysUpdateOne {
	kuo.mutation.ClearHost()
	return kuo
}

// RemoveHostIDs removes the "host" edge to Hosts entities by IDs.
func (kuo *KeysUpdateOne) RemoveHostIDs(ids ...int) *KeysUpdateOne {
	kuo.mutation.RemoveHostIDs(ids...)
	return kuo
}

// RemoveHost removes "host" edges to Hosts entities.
func (kuo *KeysUpdateOne) RemoveHost(h ...*Hosts) *KeysUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return kuo.RemoveHostIDs(ids...)
}

// Where appends a list predicates to the KeysUpdate builder.
func (kuo *KeysUpdateOne) Where(ps ...predicate.Keys) *KeysUpdateOne {
	kuo.mutation.Where(ps...)
	return kuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kuo *KeysUpdateOne) Select(field string, fields ...string) *KeysUpdateOne {
	kuo.fields = append([]string{field}, fields...)
	return kuo
}

// Save executes the query and returns the updated Keys entity.
func (kuo *KeysUpdateOne) Save(ctx context.Context) (*Keys, error) {
	return withHooks(ctx, kuo.sqlSave, kuo.mutation, kuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KeysUpdateOne) SaveX(ctx context.Context) *Keys {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KeysUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KeysUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kuo *KeysUpdateOne) check() error {
	if v, ok := kuo.mutation.Label(); ok {
		if err := keys.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "Keys.label": %w`, err)}
		}
	}
	if v, ok := kuo.mutation.Content(); ok {
		if err := keys.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Keys.content": %w`, err)}
		}
	}
	return nil
}

func (kuo *KeysUpdateOne) sqlSave(ctx context.Context) (_node *Keys, err error) {
	if err := kuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(keys.Table, keys.Columns, sqlgraph.NewFieldSpec(keys.FieldID, field.TypeInt))
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Keys.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keys.FieldID)
		for _, f := range fields {
			if !keys.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keys.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.Label(); ok {
		_spec.SetField(keys.FieldLabel, field.TypeString, value)
	}
	if value, ok := kuo.mutation.Content(); ok {
		_spec.SetField(keys.FieldContent, field.TypeBytes, value)
	}
	if kuo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   keys.HostTable,
			Columns: []string{keys.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hosts.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.RemovedHostIDs(); len(nodes) > 0 && !kuo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   keys.HostTable,
			Columns: []string{keys.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hosts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   keys.HostTable,
			Columns: []string{keys.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hosts.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Keys{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keys.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kuo.mutation.done = true
	return _node, nil
}
