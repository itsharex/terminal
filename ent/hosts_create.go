// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"terminal/ent/folders"
	"terminal/ent/hosts"
	"terminal/ent/keys"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HostsCreate is the builder for creating a Hosts entity.
type HostsCreate struct {
	config
	mutation *HostsMutation
	hooks    []Hook
}

// SetLabel sets the "label" field.
func (hc *HostsCreate) SetLabel(s string) *HostsCreate {
	hc.mutation.SetLabel(s)
	return hc
}

// SetUsername sets the "username" field.
func (hc *HostsCreate) SetUsername(s string) *HostsCreate {
	hc.mutation.SetUsername(s)
	return hc
}

// SetAddress sets the "address" field.
func (hc *HostsCreate) SetAddress(s string) *HostsCreate {
	hc.mutation.SetAddress(s)
	return hc
}

// SetPort sets the "port" field.
func (hc *HostsCreate) SetPort(u uint) *HostsCreate {
	hc.mutation.SetPort(u)
	return hc
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (hc *HostsCreate) SetNillablePort(u *uint) *HostsCreate {
	if u != nil {
		hc.SetPort(*u)
	}
	return hc
}

// SetPassword sets the "password" field.
func (hc *HostsCreate) SetPassword(s string) *HostsCreate {
	hc.mutation.SetPassword(s)
	return hc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (hc *HostsCreate) SetNillablePassword(s *string) *HostsCreate {
	if s != nil {
		hc.SetPassword(*s)
	}
	return hc
}

// SetFolderID sets the "folder_id" field.
func (hc *HostsCreate) SetFolderID(i int) *HostsCreate {
	hc.mutation.SetFolderID(i)
	return hc
}

// SetNillableFolderID sets the "folder_id" field if the given value is not nil.
func (hc *HostsCreate) SetNillableFolderID(i *int) *HostsCreate {
	if i != nil {
		hc.SetFolderID(*i)
	}
	return hc
}

// SetKeyID sets the "key_id" field.
func (hc *HostsCreate) SetKeyID(i int) *HostsCreate {
	hc.mutation.SetKeyID(i)
	return hc
}

// SetNillableKeyID sets the "key_id" field if the given value is not nil.
func (hc *HostsCreate) SetNillableKeyID(i *int) *HostsCreate {
	if i != nil {
		hc.SetKeyID(*i)
	}
	return hc
}

// SetFolder sets the "folder" edge to the Folders entity.
func (hc *HostsCreate) SetFolder(f *Folders) *HostsCreate {
	return hc.SetFolderID(f.ID)
}

// SetKey sets the "key" edge to the Keys entity.
func (hc *HostsCreate) SetKey(k *Keys) *HostsCreate {
	return hc.SetKeyID(k.ID)
}

// Mutation returns the HostsMutation object of the builder.
func (hc *HostsCreate) Mutation() *HostsMutation {
	return hc.mutation
}

// Save creates the Hosts in the database.
func (hc *HostsCreate) Save(ctx context.Context) (*Hosts, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HostsCreate) SaveX(ctx context.Context) *Hosts {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HostsCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HostsCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HostsCreate) defaults() {
	if _, ok := hc.mutation.Port(); !ok {
		v := hosts.DefaultPort
		hc.mutation.SetPort(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HostsCreate) check() error {
	if _, ok := hc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "Hosts.label"`)}
	}
	if v, ok := hc.mutation.Label(); ok {
		if err := hosts.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "Hosts.label": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Hosts.username"`)}
	}
	if v, ok := hc.mutation.Username(); ok {
		if err := hosts.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Hosts.username": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Hosts.address"`)}
	}
	if v, ok := hc.mutation.Address(); ok {
		if err := hosts.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Hosts.address": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New(`ent: missing required field "Hosts.port"`)}
	}
	if v, ok := hc.mutation.Port(); ok {
		if err := hosts.PortValidator(v); err != nil {
			return &ValidationError{Name: "port", err: fmt.Errorf(`ent: validator failed for field "Hosts.port": %w`, err)}
		}
	}
	return nil
}

func (hc *HostsCreate) sqlSave(ctx context.Context) (*Hosts, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HostsCreate) createSpec() (*Hosts, *sqlgraph.CreateSpec) {
	var (
		_node = &Hosts{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(hosts.Table, sqlgraph.NewFieldSpec(hosts.FieldID, field.TypeInt))
	)
	if value, ok := hc.mutation.Label(); ok {
		_spec.SetField(hosts.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := hc.mutation.Username(); ok {
		_spec.SetField(hosts.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := hc.mutation.Address(); ok {
		_spec.SetField(hosts.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := hc.mutation.Port(); ok {
		_spec.SetField(hosts.FieldPort, field.TypeUint, value)
		_node.Port = value
	}
	if value, ok := hc.mutation.Password(); ok {
		_spec.SetField(hosts.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if nodes := hc.mutation.FolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hosts.FolderTable,
			Columns: []string{hosts.FolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(folders.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FolderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.KeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hosts.KeyTable,
			Columns: []string{hosts.KeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keys.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.KeyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HostsCreateBulk is the builder for creating many Hosts entities in bulk.
type HostsCreateBulk struct {
	config
	err      error
	builders []*HostsCreate
}

// Save creates the Hosts entities in the database.
func (hcb *HostsCreateBulk) Save(ctx context.Context) ([]*Hosts, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Hosts, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HostsCreateBulk) SaveX(ctx context.Context) []*Hosts {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HostsCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HostsCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
