// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"terminal/ent/keys"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Keys is the model entity for the Keys schema.
type Keys struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 标记
	Label string `json:"label,omitempty"`
	// 私钥信息
	Content []byte `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KeysQuery when eager-loading is set.
	Edges        KeysEdges `json:"edges"`
	selectValues sql.SelectValues
}

// KeysEdges holds the relations/edges for other nodes in the graph.
type KeysEdges struct {
	// Host holds the value of the host edge.
	Host []*Hosts `json:"host,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading.
func (e KeysEdges) HostOrErr() ([]*Hosts, error) {
	if e.loadedTypes[0] {
		return e.Host, nil
	}
	return nil, &NotLoadedError{edge: "host"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Keys) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case keys.FieldContent:
			values[i] = new([]byte)
		case keys.FieldID:
			values[i] = new(sql.NullInt64)
		case keys.FieldLabel:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Keys fields.
func (k *Keys) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case keys.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			k.ID = int(value.Int64)
		case keys.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				k.Label = value.String
			}
		case keys.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil {
				k.Content = *value
			}
		default:
			k.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Keys.
// This includes values selected through modifiers, order, etc.
func (k *Keys) Value(name string) (ent.Value, error) {
	return k.selectValues.Get(name)
}

// QueryHost queries the "host" edge of the Keys entity.
func (k *Keys) QueryHost() *HostsQuery {
	return NewKeysClient(k.config).QueryHost(k)
}

// Update returns a builder for updating this Keys.
// Note that you need to call Keys.Unwrap() before calling this method if this Keys
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *Keys) Update() *KeysUpdateOne {
	return NewKeysClient(k.config).UpdateOne(k)
}

// Unwrap unwraps the Keys entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (k *Keys) Unwrap() *Keys {
	_tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("ent: Keys is not a transactional entity")
	}
	k.config.driver = _tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *Keys) String() string {
	var builder strings.Builder
	builder.WriteString("Keys(")
	builder.WriteString(fmt.Sprintf("id=%v, ", k.ID))
	builder.WriteString("label=")
	builder.WriteString(k.Label)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", k.Content))
	builder.WriteByte(')')
	return builder.String()
}

// KeysSlice is a parsable slice of Keys.
type KeysSlice []*Keys
