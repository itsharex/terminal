// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"terminal/ent/folders"
	"terminal/ent/hosts"
	"terminal/ent/keys"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Hosts is the model entity for the Hosts schema.
type Hosts struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 标记
	Label string `json:"label,omitempty"`
	// 用户名
	Username string `json:"username,omitempty"`
	// 地址
	Address string `json:"address,omitempty"`
	// 端口
	Port uint `json:"port,omitempty"`
	// 密码
	Password string `json:"password,omitempty"`
	// 所属目录ID,默认是-1
	FolderID int `json:"folder_id,omitempty"`
	// 绑定私钥ID,默认是-1,标识未绑定
	KeyID int `json:"key_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostsQuery when eager-loading is set.
	Edges        HostsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HostsEdges holds the relations/edges for other nodes in the graph.
type HostsEdges struct {
	// Folder holds the value of the folder edge.
	Folder *Folders `json:"folder,omitempty"`
	// Key holds the value of the key edge.
	Key *Keys `json:"key,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FolderOrErr returns the Folder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostsEdges) FolderOrErr() (*Folders, error) {
	if e.Folder != nil {
		return e.Folder, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: folders.Label}
	}
	return nil, &NotLoadedError{edge: "folder"}
}

// KeyOrErr returns the Key value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostsEdges) KeyOrErr() (*Keys, error) {
	if e.Key != nil {
		return e.Key, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: keys.Label}
	}
	return nil, &NotLoadedError{edge: "key"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hosts) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hosts.FieldID, hosts.FieldPort, hosts.FieldFolderID, hosts.FieldKeyID:
			values[i] = new(sql.NullInt64)
		case hosts.FieldLabel, hosts.FieldUsername, hosts.FieldAddress, hosts.FieldPassword:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hosts fields.
func (h *Hosts) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hosts.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case hosts.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				h.Label = value.String
			}
		case hosts.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				h.Username = value.String
			}
		case hosts.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				h.Address = value.String
			}
		case hosts.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				h.Port = uint(value.Int64)
			}
		case hosts.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				h.Password = value.String
			}
		case hosts.FieldFolderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field folder_id", values[i])
			} else if value.Valid {
				h.FolderID = int(value.Int64)
			}
		case hosts.FieldKeyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field key_id", values[i])
			} else if value.Valid {
				h.KeyID = int(value.Int64)
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Hosts.
// This includes values selected through modifiers, order, etc.
func (h *Hosts) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryFolder queries the "folder" edge of the Hosts entity.
func (h *Hosts) QueryFolder() *FoldersQuery {
	return NewHostsClient(h.config).QueryFolder(h)
}

// QueryKey queries the "key" edge of the Hosts entity.
func (h *Hosts) QueryKey() *KeysQuery {
	return NewHostsClient(h.config).QueryKey(h)
}

// Update returns a builder for updating this Hosts.
// Note that you need to call Hosts.Unwrap() before calling this method if this Hosts
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hosts) Update() *HostsUpdateOne {
	return NewHostsClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Hosts entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hosts) Unwrap() *Hosts {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hosts is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hosts) String() string {
	var builder strings.Builder
	builder.WriteString("Hosts(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("label=")
	builder.WriteString(h.Label)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(h.Username)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(h.Address)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(fmt.Sprintf("%v", h.Port))
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(h.Password)
	builder.WriteString(", ")
	builder.WriteString("folder_id=")
	builder.WriteString(fmt.Sprintf("%v", h.FolderID))
	builder.WriteString(", ")
	builder.WriteString("key_id=")
	builder.WriteString(fmt.Sprintf("%v", h.KeyID))
	builder.WriteByte(')')
	return builder.String()
}

// HostsSlice is a parsable slice of Hosts.
type HostsSlice []*Hosts
